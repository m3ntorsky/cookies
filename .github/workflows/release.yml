name: Auto Release if version was changed
on:
  push:
    branches:
      - master

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write 

    steps:
      - name: Setup Environment
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
          echo "VERSION_FILE=plugins/${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}/core.lua" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config user.name 'GitHub Actions'
          git config user.email 'actions@github.com'

      - name: Checkout to master branch
        run: |
          git checkout master || git checkout -b master

      - name: Read current version from core file
        id: read_version
        run: |
          VERSION_FILE="${{ env.VERSION_FILE }}"
          PLUGIN_VERSION=$(awk -F'"' '/function GetPluginVersion()/, /end/ { if ($0 ~ /return/) print $2 }' "$VERSION_FILE")
          echo "Detected version: $PLUGIN_VERSION"
          echo "PLUGIN_VERSION=$PLUGIN_VERSION" >> $GITHUB_ENV

      - name: Check if tag exists
        id: check_tag
        run: |
          git fetch --tags
          if git rev-parse "refs/tags/${{ env.PLUGIN_VERSION }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.PLUGIN_VERSION }} already exists."
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Tag ${{ env.PLUGIN_VERSION }} doesn't exist. Creating tag."
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Remove README and LICENSE files
        id: remove_files
        if: env.TAG_EXISTS == 'false'
        run: |
          echo "Removing README and LICENSE files"
          rm -f README.md LICENSE

      - name: Create Release if version changed
        if: env.TAG_EXISTS == 'false'
        run: |
          echo "Creating release for version ${{ env.PLUGIN_VERSION }}"
          git tag ${{ env.PLUGIN_VERSION }}
          git push origin ${{ env.PLUGIN_VERSION }}
          echo "TAG_VERSION=${{ env.PLUGIN_VERSION }}" >> $GITHUB_ENV
          echo "RELEASE_CREATED=true" >> $GITHUB_ENV

      - name: Create ZIP archive
        id: create_zip
        if: env.TAG_EXISTS == 'false'
        run: |
          REPO_NAME=$(basename -s .git `git config --get remote.origin.url`)
          ZIP_NAME="${REPO_NAME}.zip"
          echo "ZIP Name: $ZIP_NAME"
          zip -r "$ZIP_NAME" . -x "*.git*"
          echo "ZIP_PATH=$ZIP_NAME" >> $GITHUB_ENV

      - name: Get last tag before current tag
        id: get_last_tag
        if: env.TAG_EXISTS == 'false'
        run: |
          git fetch --tags
          LAST_TAG=$(git tag --sort=-creatordate | grep -B 1 "${GITHUB_REF##*/}" | head -n 1)
          if [ "$LAST_TAG" = "${GITHUB_REF##*/}" ]; then
            LAST_TAG=$(git tag --sort=-creatordate | grep -v "${GITHUB_REF##*/}" | head -n 1)
          fi
          echo "Last tag before current tag: $LAST_TAG"
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV

      - name: Get commits from last tag to HEAD
        id: get_commits
        if: env.TAG_EXISTS == 'false'
        run: |
          LAST_TAG="${{ env.LAST_TAG }}"
          echo "Last tag: $LAST_TAG"
          if [ -z "$LAST_TAG" ]; then
            COMMIT_MESSAGES=$(git log --pretty=format:"* [%h](https://github.com/${{ github.repository }}/commit/%H) - %s" || echo "No commits found")
          else
            COMMIT_MESSAGES=$(git log "${LAST_TAG}..HEAD" --pretty=format:"* [%h](https://github.com/${{ github.repository }}/commit/%H) - %s" || echo "No commits found")
          fi
          echo "Commits from last tag to HEAD:"
          echo "$COMMIT_MESSAGES"
          echo "COMMITS=${COMMIT_MESSAGES}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        if: env.TAG_EXISTS == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PLUGIN_VERSION }}  # Use the tag name directly, without refs/tags/
          release_name: ${{ env.PLUGIN_VERSION }}  # Use the tag name directly
          body: |
            Changes in this release:
            ${{ env.COMMITS }}

      - name: Upload Release Asset
        if: env.TAG_EXISTS == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ZIP_PATH }}
          asset_name: ${{ env.ZIP_PATH }}
          asset_content_type: application/zip
