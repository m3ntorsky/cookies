name: Release if version was changed
on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Setup Environment
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
          echo "VERSION_FILE=plugins/${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}/core.lua" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config user.name 'GitHub Actions'
          git config user.email 'actions@github.com'
      
      - name: Checkout to master branch
        run: |
          git checkout master || git checkout -b master

      - name: Read current version from core file
        id: read_version
        run: |
          VERSION_FILE="${{ env.VERSION_FILE }}"
          PLUGIN_VERSION=$(awk -F'"' '/function GetPluginVersion()/, /end/ { if ($0 ~ /return/) print $2 }' "$VERSION_FILE")
          echo "Detected version: $PLUGIN_VERSION"
          echo "PLUGIN_VERSION=$PLUGIN_VERSION" >> $GITHUB_ENV

      - name: Check if tag exists
        id: check_tag
        run: |
          git fetch --tags
          if git rev-parse "refs/tags/${{ env.PLUGIN_VERSION }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.PLUGIN_VERSION }} already exists."
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Tag ${{ env.PLUGIN_VERSION }} doesn't exist. Creating tag."
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Get recent commit messages since last release
        id: get_commits
        if: env.TAG_EXISTS == 'false'
        run: |
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "no_tag")

          if [[ "$LATEST_TAG" == "no_tag" ]]; then
            COMMIT_MESSAGES="- Initial Release"
          else
            COMMIT_MESSAGES=$(git log $LATEST_TAG..HEAD --oneline | sed 's/^/- /')
          fi

          echo "COMMIT_MESSAGES<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_MESSAGES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release if version changed
        if: env.TAG_EXISTS == 'false'
        run: |
          echo "Creating release for version ${{ env.PLUGIN_VERSION }}"
          git tag ${{ env.PLUGIN_VERSION }}
          git push origin ${{ env.PLUGIN_VERSION }}
          echo "TAG_VERSION=${{ env.PLUGIN_VERSION }}" >> $GITHUB_ENV
          echo "RELEASE_CREATED=true" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        if: env.TAG_EXISTS == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PLUGIN_VERSION }}  # Use the tag name directly, without refs/tags/
          release_name: ${{ env.PLUGIN_VERSION }}  # Use the tag name directly
          body: |
            **Changes:**
            ${{ env.COMMIT_MESSAGES }}

      - name: Upload Release Asset
        if: env.TAG_EXISTS == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ZIP_PATH }}
          asset_name: ${{ env.ZIP_PATH }}
          asset_content_type: application/zip